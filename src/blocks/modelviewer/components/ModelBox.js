/**
	*
	* ModelBox Component.
	*
	*/

// Import wp dependencies
import { __ } from '@wordpress/i18n';
import { useBlockProps } from '@wordpress/block-editor';
import { useEffect, useRef } from '@wordpress/element';
import { Canvas } from '@react-three/fiber';
import { useLoader } from '@react-three/fiber';
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { useGLTF } from '@react-three/drei';
import * as THREE from 'three'

// Import blpge dependencies
const {
	gspb_spacing_cssGen,
	aos_animation_cssGen,
	gspb_position_cssGen,
	gspb_csstransform_cssGen,
	gspb_responsive_cssGen,
	gspb_background_cssGen,
	gspb_Css_Final
} = gspblib.utilities;
const { gspb_cssGen } = gspblib.helpers;
const { AnimationRenderProps } = gspblib.collections;

const ModelBox = (props) => {

	const {
		attributes: {
			id,
			inlineCssStyles,
			td_url,
			imageid,
			imageurl,
			td_load_iter,
			threecanvwidth,
			threecanvheight,
			threecanvheightUnit,
			threecanvwidthUnit,
			td_ar,
			td_ar_scale,
			td_ar_wall,
			usdz_url,
			td_rotate,
			td_camera,
			td_zoom_disable,
			td_cam_orbit,
			td_scale,
			td_sky,
			td_env,
			td_neutral,
			td_shadow_opacity,
			td_shadow_soft,
			td_play,
			td_an_choose,
			td_rx,
			td_ry,
			td_rz,
			td_mmove,
			td_variants,
			align,
			spacing,
			background,
			responsive,
			csstransform,
			animation,
			position,
			td_objects
		},
		setAttributes,
		className,
		clientId
	} = props;
	const ModelRef = useRef();
	// const scene = new THREE.Scene();
	// const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }) // turn on antialias
	// const gltfloader = new GLTFLoader();

	// var container;

	let modelBoxId = `gspb_modelBox-id-${id}`;

	// for styles applied by the user
	let css_selector_by_user = `#${modelBoxId}`;
	let css_wrapper = css_selector_by_user + ' .gsmodelviewer';

	// we should keep className generated by Gutenberg
	let modelBoxClassName = `gspb_modelBox gs-t-model ${modelBoxId}`;

	const blockProps = props.editor ?
		{
			className: modelBoxClassName + ' gspb-selector-element ' + props.attributes?.className
		} :
		useBlockProps.save({
			className: modelBoxClassName
		});
	blockProps.id = modelBoxId;


	// Final CSS for the block
	let final_css = '.gs-t-model{position:relative;}.gs-t-model :not(:defined)>:not(.poster){display:none}.gs-t-model :defined>.poster>.pre-prompt{display:none}.gs-t-model .poster{display:flex;justify-content:center;align-items:center;height:100%;top:0;left:0;background-size:contain;background-repeat:no-repeat;background-position:center}.gs-t-model .pre-prompt{pointer-events:none;animation-name:lefttoright;animation-duration:5s;animation-iteration-count:infinite;animation-timing-function:ease-in-out}.gs-t-model .ar-button{position:absolute;left:50%;transform:translateX(-50%);white-space:nowrap;bottom:16px;font-size:14px;border-radius:18px;border:1px solid #dadce0;color:#6495ed;display:flex;visibility:visible !important; gap:10px;}.progress-bar{display:block;width:33%;height:10%;max-height:2%;position:absolute;left:50%;top:50%;transform:translate3d(-50%,-50%,0);border-radius:25px}.progress-bar.hide{visibility:hidden;transition:visibility .3s}.update-bar{background-image:linear-gradient(45deg,#b2a2cd 25%,#5c5269 25%,#5c5269 50%,#b2a2cd 50%,#b2a2cd 75%,#5c5269 75%,#5c5269 100%);background-size:28.28px 28.28px;width:0%;height:100%;border-radius:25px;float:left;transition:width .3s}.gs-t-model .progress-bar:not(.hide) + .ar-button{display:none !important;}';

	final_css += `${css_selector_by_user} .gsmodelviewer{--poster-color: transparent;background-color:transparent;--progress-mask:transparent;--progress-bar-color: #00ab1985}`;

	final_css = gspb_cssGen(
		css_selector_by_user + ' .gsmodelviewer',
		['width'],
		[
			[
				[threecanvwidth[0] ? threecanvwidth[0] + threecanvwidthUnit[0] : null],
				[threecanvwidth[1] ? threecanvwidth[1] + threecanvwidthUnit[1] : null],
				[threecanvwidth[2] ? threecanvwidth[2] + threecanvwidthUnit[2] : null],
				[threecanvwidth[3] ? threecanvwidth[3] + threecanvwidthUnit[3] : null],
			],
		],
		final_css,
		false
	);
	final_css = gspb_cssGen(
		css_selector_by_user + ' .gsmodelviewer',
		['height'],
		[
			[
				[threecanvheight[0] ? threecanvheight[0] + threecanvheightUnit[0] : null],
				[threecanvheight[1] ? threecanvheight[1] + threecanvheightUnit[1] : null],
				[threecanvheight[2] ? threecanvheight[2] + threecanvheightUnit[2] : null],
				[threecanvheight[3] ? threecanvheight[3] + threecanvheightUnit[3] : null],
			],
		],
		final_css,
		false
	);

	// spacing
	final_css = gspb_spacing_cssGen(
		spacing,
		css_wrapper,
		final_css
	);

	// background
	final_css = gspb_background_cssGen(
		background,
		css_wrapper,
		final_css
	);

	// Animation
	final_css = aos_animation_cssGen(
		animation,
		css_selector_by_user,
		final_css
	);

	// Responsive classes
	final_css = gspb_responsive_cssGen(
		responsive,
		css_selector_by_user,
		final_css,
	);

	// Position
	final_css = gspb_position_cssGen(
		position,
		'body.gspb-bodyfront ' + css_selector_by_user,
		final_css,
	);

	// Css transform
	final_css = gspb_csstransform_cssGen(
		csstransform,
		css_selector_by_user,
		final_css,
		animation
	);

	//Render Animation Properties
	let AnimationProps = {};
	AnimationProps = AnimationRenderProps(animation);

	// Get The Stored CSS
	gspb_Css_Final(id, final_css, props);
	let editor_css = final_css;
	// Position
	editor_css = gspb_position_cssGen(
		position,
		'#block-' + clientId,
		editor_css,
	);

	// useEffect(() => {
	const scene = new THREE.Scene();
	var container;
	scene.background = new THREE.Color(0x000000)
	scene.background = null;
	const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }) // turn on antialias
	renderer.setClearColor(0x000000, 0);
	// renderer.outputEncoding = THREE.sRGBEncoding // set color encoding
	// container.appendChild(renderer.domElement) // add the renderer to html div


	/////////////////////////////////////////////////////////////////////////
	///// CAMERAS CONFIG
	const camera = new THREE.PerspectiveCamera(45, 1, 0.001, 100);
	camera.position.set(1.5, 1.5, 1.5);
	camera.lookAt(0, 0, 0);
	camera.updateMatrix();
	const ambient = new THREE.AmbientLight(0xffffff, 1)
	scene.add(ambient)

	const sunLight = new THREE.PointLight(0xffffff, 0.8)
	sunLight.position.set(20, 20, 30)
	scene.add(sunLight)
	scene.add(camera);
	const controls = new OrbitControls(camera, renderer.domElement);

	// },[])
	useEffect(() => {
		let test_objects = [];
		// if (td_objects) { test_objects = td_objects; }
		// test_objects.push({id:"test_id", name: "test object"});

		if (!td_url) return;

		container = ModelRef.current.querySelector('.canvascontainer2');
		renderer.setSize(container.clientWidth, container.clientHeight); // make it full screen
		renderer.setPixelRatio(container.clientWidth / container.clientHeight) //set pixel ratio
		camera.aspect = container.clientWidth / container.clientHeight;
		camera.updateProjectionMatrix();
		container.appendChild(renderer.domElement);
		const loader = new GLTFLoader();

// treeselect contructor----------------------------------------------//
		function getobjects(parent, childrens = []) {

			if (parent.children.length == 0 && parent.isMesh) {
				childrens.push({ id: parent.uuid, name: parent.name });
				// test_objects.push(childrens)
				return undefined;
			} else if (parent.children.length == 1) {
				getobjects(parent.children[0])
			} else if (parent.children.length > 1) {
				parent.children.map((child) => {
					if (child.children.length == 0 && child.isMesh) {
						// if(getobjects(child)){
						// childrens.push(getobjects(child));
						test_objects.push({id: child.uuid, name: child.name, children: getobjects(child) });
						getobjects(child)
					} else if (child.children.length >= 1) {
						getobjects(child)
					}
					// }
				});

			} else {
				return null;
			}
			// }
		}

// treeselect contructor----------------------------------------------//

// Resize_response----------------------------------------------//
		window.addEventListener('resize', () => {
			renderer.setSize(container.clientWidth, container.clientHeight); // make it full screen
			renderer.setPixelRatio(container.clientWidth / container.clientHeight) //set pixel ratio
			camera.aspect = container.clientWidth / container.clientHeight;
			camera.updateProjectionMatrix()
		})

// Resize_response----------------------------------------------//

		loader.load(
			td_url,
			(gltf) => {
				// Do something with the loaded model
				getobjects(gltf.scene);

				setAttributes({ td_objects: test_objects });
				var max = 0;

				var max_x_pos = 0;
				var min_x_pos = 0;
				var max_y_pos = 0;
				var min_y_pos = 0;
				var max_z_pos = 0;
				var min_z_pos = 0;
				var model = gltf.scene;
				scene.remove(scene.children[3])
				scene.add(model);
				console.log(scene);
				// model.traverse(
				// 	(child) => {
				// 		if ((child).isMesh) {
				// 			var point_count = child.geometry.attributes.position.count * 3;

				// 			for (let i = 0; i < point_count; i++) {

				// 				if (i % 3 == 0) {
				// 					if (max_x_pos < child.geometry.attributes.position.array[i]) max_x_pos = child.geometry.attributes.position.array[i];
				// 					if (min_x_pos > child.geometry.attributes.position.array[i]) min_x_pos = child.geometry.attributes.position.array[i];

				// 				}
				// 				if (i % 3 == 1) {
				// 					if (max_y_pos < child.geometry.attributes.position.array[i]) max_y_pos = child.geometry.attributes.position.array[i];
				// 					if (min_y_pos > child.geometry.attributes.position.array[i]) min_y_pos = child.geometry.attributes.position.array[i];
				// 				}
				// 				if (i % 3 == 2) {
				// 					if (max_z_pos < child.geometry.attributes.position.array[i]) max_z_pos = child.geometry.attributes.position.array[i];
				// 					if (min_z_pos > child.geometry.attributes.position.array[i]) min_z_pos = child.geometry.attributes.position.array[i];
				// 				}
				// 			}
				// 		}
				// 	}
				// )
				// max = Math.max(max_x_pos - min_x_pos, max_y_pos - min_y_pos, max_z_pos - min_z_pos);
				// model.scale.set(1 / max, 1 / max, 1 / max);
				// model.position.set((max_x_pos + min_x_pos) / 2 / max * (-1), (max_y_pos + min_y_pos) / 2 / max * (-1), (max_z_pos + min_z_pos) / 2 / max * (-1));

				// scene.add(model);
				// console.log(model)

			},
			(progress) => {
				// Progress callback
				console.log(`Loading progress: ${(progress.loaded / progress.total) * 100}%`);
			},
			(error) => {
				// Error callback
				console.error('An error occurred while loading the GLTF file:', error);
			}
		);
		function rendeLoop() {

			renderer.render(scene, camera)
			controls.update();
			requestAnimationFrame(rendeLoop) //loop the render function    

		}

		rendeLoop() //start rendering

	}, [td_url])

	return (
		<>
			<div
				{...blockProps}
				style={{ display: 'flex' }}
				{...AnimationProps}
				ref={ModelRef}
			>
				<div class='canvascontainer2' style={{ width: "100%", height: "250px" }} />
				{/* <Canvas>
					<ambientLight />
					<pointLight position={[10, 10, 10]} />
					
				</Canvas> */}
				<model-viewer
					id={`gs_three_${id}`}
					class="gsmodelviewer"
					src={td_url ? td_url : null}
					environment-image={td_env ? td_env : (td_neutral ? "neutral" : null)}
					skybox-image={td_sky ? td_sky : null}
					data-loaditer={td_load_iter ? 'true' : null}
					shadow-intensity={td_shadow_opacity ? td_shadow_opacity : null}
					shadow-softness={td_shadow_soft ? td_shadow_soft : null}
					autoplay={td_play ? "true" : null}
					animation-name={td_an_choose ? td_an_choose : null}
					auto-rotate={td_rotate ? "true" : null}
					camera-controls={td_camera ? "true" : null}
					data-camera={td_camera ? "yes" : null}
					disable-zoom={td_zoom_disable ? "true" : null}
					camera-orbit={td_cam_orbit ? td_cam_orbit : null}
					ar={td_ar ? "true" : null}
					ar-scale={td_ar_scale ? "fixed" : null}
					ar-placement={td_ar_wall ? "wall" : null}
					ios-src={usdz_url ? usdz_url : null}
					data-scale={td_scale ? td_scale : null}
					data-rx={td_rx ? td_rx : null}
					data-ry={td_ry ? td_ry : null}
					data-rz={td_rz ? td_rz : null}
					data-mousemove={td_mmove ? td_mmove : null}
					data-variants={td_variants ? "yes" : null}
					style={{ display: 'none' }}
				>
					{td_variants && (
						<div className="variantcontrols">
							<div>
								{__('Variant: ')}
								<select
									className="gsvariantselect"
									style={{ marginLeft: 5, borderColor: "lightgrey", borderWidth: 1, borderStyle: "solid", marginTop: 5, overflow: "hidden" }}
									id={`gs_threevar_${id}`}
								>
								</select>
							</div>
						</div>
					)}
					{imageurl && (
						<div
							className="poster"
							slot="poster"
							style={{ backgroundImage: `url(${imageurl})` }}
						>
							<div class="pre-prompt">
								<svg xmlns="http://www.w3.org/2000/svg" width="25" height="36">
									<defs>
										<path id={`${id}A`} d="M.001.232h24.997V36H.001z" />
									</defs>
									<g transform="translate(-11 -4)" fill="none" fill-rule="evenodd">
										<path fill-opacity="0" fill="#fff" d="M0 0h44v44H0z" />
										<g transform="translate(11 3)">
											<path d="M8.733 11.165c.04-1.108.766-2.027 1.743-2.307a2.54 2.54 0 0 1 .628-.089c.16 0 .314.017.463.044 1.088.2 1.9 1.092 1.9 2.16v8.88h1.26c2.943-1.39 5-4.45 5-8.025a9.01 9.01 0 0 0-1.9-5.56l-.43-.5c-.765-.838-1.683-1.522-2.712-2-1.057-.49-2.226-.77-3.46-.77s-2.4.278-3.46.77c-1.03.478-1.947 1.162-2.71 2l-.43.5a9.01 9.01 0 0 0-1.9 5.56 9.04 9.04 0 0 0 .094 1.305c.03.21.088.41.13.617l.136.624c.083.286.196.56.305.832l.124.333a8.78 8.78 0 0 0 .509.953l.065.122a8.69 8.69 0 0 0 3.521 3.191l1.11.537v-9.178z" fill-opacity=".5" fill="#e4e4e4" />
											<path d="M22.94 26.218l-2.76 7.74c-.172.485-.676.8-1.253.8H12.24c-1.606 0-3.092-.68-3.98-1.82-1.592-2.048-3.647-3.822-6.11-5.27-.095-.055-.15-.137-.152-.23-.004-.1.046-.196.193-.297.56-.393 1.234-.6 1.926-.6a3.43 3.43 0 0 1 .691.069l4.922.994V10.972c0-.663.615-1.203 1.37-1.203s1.373.54 1.373 1.203v9.882h2.953c.273 0 .533.073.757.21l6.257 3.874c.027.017.045.042.07.06.41.296.586.77.426 1.22M4.1 16.614c-.024-.04-.042-.083-.065-.122a8.69 8.69 0 0 1-.509-.953c-.048-.107-.08-.223-.124-.333l-.305-.832c-.058-.202-.09-.416-.136-.624l-.13-.617a9.03 9.03 0 0 1-.094-1.305c0-2.107.714-4.04 1.9-5.56l.43-.5c.764-.84 1.682-1.523 2.71-2 1.058-.49 2.226-.77 3.46-.77s2.402.28 3.46.77c1.03.477 1.947 1.16 2.712 2l.428.5a9 9 0 0 1 1.901 5.559c0 3.577-2.056 6.636-5 8.026h-1.26v-8.882c0-1.067-.822-1.96-1.9-2.16-.15-.028-.304-.044-.463-.044-.22 0-.427.037-.628.09-.977.28-1.703 1.198-1.743 2.306v9.178l-1.11-.537C6.18 19.098 4.96 18 4.1 16.614M22.97 24.09l-6.256-3.874c-.102-.063-.218-.098-.33-.144 2.683-1.8 4.354-4.855 4.354-8.243 0-.486-.037-.964-.104-1.43a9.97 9.97 0 0 0-1.57-4.128l-.295-.408-.066-.092a10.05 10.05 0 0 0-.949-1.078c-.342-.334-.708-.643-1.094-.922-1.155-.834-2.492-1.412-3.94-1.65l-.732-.088-.748-.03a9.29 9.29 0 0 0-1.482.119c-1.447.238-2.786.816-3.94 1.65a9.33 9.33 0 0 0-.813.686 9.59 9.59 0 0 0-.845.877l-.385.437-.36.5-.288.468-.418.778-.04.09c-.593 1.28-.93 2.71-.93 4.222 0 3.832 2.182 7.342 5.56 8.938l1.437.68v4.946L5 25.64a4.44 4.44 0 0 0-.888-.086c-.017 0-.034.003-.05.003-.252.004-.503.033-.75.08a5.08 5.08 0 0 0-.237.056c-.193.046-.382.107-.568.18-.075.03-.15.057-.225.1-.25.114-.494.244-.723.405a1.31 1.31 0 0 0-.566 1.122 1.28 1.28 0 0 0 .645 1.051C4 29.925 5.96 31.614 7.473 33.563a5.06 5.06 0 0 0 .434.491c1.086 1.082 2.656 1.713 4.326 1.715h6.697c.748-.001 1.43-.333 1.858-.872.142-.18.256-.38.336-.602l2.757-7.74c.094-.26.13-.53.112-.794s-.088-.52-.203-.76a2.19 2.19 0 0 0-.821-.91" fill-opacity=".6" fill="#000" />
											<path d="M22.444 24.94l-6.257-3.874a1.45 1.45 0 0 0-.757-.211h-2.953v-9.88c0-.663-.616-1.203-1.373-1.203s-1.37.54-1.37 1.203v16.643l-4.922-.994a3.44 3.44 0 0 0-.692-.069 3.35 3.35 0 0 0-1.925.598c-.147.102-.198.198-.194.298.004.094.058.176.153.23 2.462 1.448 4.517 3.22 6.11 5.27.887 1.14 2.373 1.82 3.98 1.82h6.686c.577 0 1.08-.326 1.253-.8l2.76-7.74c.16-.448-.017-.923-.426-1.22-.025-.02-.043-.043-.07-.06z" fill="#fff" />
											<g transform="translate(0 .769)">
												<mask id={`${id}B`} fill="#fff">
													<use xlinkHref={`#${id}A`} />
												</mask>
												<path d="M23.993 24.992a1.96 1.96 0 0 1-.111.794l-2.758 7.74c-.08.22-.194.423-.336.602-.427.54-1.11.87-1.857.872h-6.698c-1.67-.002-3.24-.633-4.326-1.715-.154-.154-.3-.318-.434-.49C5.96 30.846 4 29.157 1.646 27.773c-.385-.225-.626-.618-.645-1.05a1.31 1.31 0 0 1 .566-1.122 4.56 4.56 0 0 1 .723-.405l.225-.1a4.3 4.3 0 0 1 .568-.18l.237-.056c.248-.046.5-.075.75-.08.018 0 .034-.003.05-.003.303-.001.597.027.89.086l3.722.752V20.68l-1.436-.68c-3.377-1.596-5.56-5.106-5.56-8.938 0-1.51.336-2.94.93-4.222.015-.03.025-.06.04-.09.127-.267.268-.525.418-.778.093-.16.186-.316.288-.468.063-.095.133-.186.2-.277L3.773 5c.118-.155.26-.29.385-.437.266-.3.544-.604.845-.877a9.33 9.33 0 0 1 .813-.686C6.97 2.167 8.31 1.59 9.757 1.35a9.27 9.27 0 0 1 1.481-.119 8.82 8.82 0 0 1 .748.031c.247.02.49.05.733.088 1.448.238 2.786.816 3.94 1.65.387.28.752.588 1.094.922a9.94 9.94 0 0 1 .949 1.078l.066.092c.102.133.203.268.295.408a9.97 9.97 0 0 1 1.571 4.128c.066.467.103.945.103 1.43 0 3.388-1.67 6.453-4.353 8.243.11.046.227.08.33.144l6.256 3.874c.37.23.645.55.82.9.115.24.185.498.203.76m.697-1.195c-.265-.55-.677-1.007-1.194-1.326l-5.323-3.297c2.255-2.037 3.564-4.97 3.564-8.114 0-2.19-.637-4.304-1.84-6.114-.126-.188-.26-.37-.4-.552-.645-.848-1.402-1.6-2.252-2.204C15.472.91 13.393.232 11.238.232A10.21 10.21 0 0 0 5.23 2.19c-.848.614-1.606 1.356-2.253 2.205-.136.18-.272.363-.398.55C1.374 6.756.737 8.87.737 11.06c0 4.218 2.407 8.08 6.133 9.842l.863.41v3.092l-2.525-.51c-.356-.07-.717-.106-1.076-.106a5.45 5.45 0 0 0-3.14.996c-.653.46-1.022 1.202-.99 1.983a2.28 2.28 0 0 0 1.138 1.872c2.24 1.318 4.106 2.923 5.543 4.772 1.26 1.62 3.333 2.59 5.55 2.592h6.698c1.42-.001 2.68-.86 3.134-2.138l2.76-7.74c.272-.757.224-1.584-.134-2.325" fill-opacity=".05" fill="#000" mask="url(#B)" />
											</g>
										</g>
									</g>
								</svg>
							</div>
						</div>
					)}

					<div className="progress-bar" slot="progress-bar">
						<div className="update-bar"></div>
					</div>
					<button
						slot="ar-button"
						className="ar-button"
						style={{ display: "flex", justifyContent: "center", alignItems: "center", backgroundColor: "white", padding: "5px 15px 5px 15px", visibility: "hidden" }}
					>
						<svg height="25" viewBox="0 0 60 54" width="25" class="mr10"><g fill="none" fill-rule="evenodd"><g fill="rgb(0,0,0)" fill-rule="nonzero"><path d="m53 0h-46c-3.86416566.00440864-6.99559136 3.13583434-7 7v40c.00440864 3.8641657 3.13583434 6.9955914 7 7h46c3.8641657-.0044086 6.9955914-3.1358343 7-7v-40c-.0044086-3.86416566-3.1358343-6.99559136-7-7zm5 47c-.0033061 2.7600532-2.2399468 4.9966939-5 5h-46c-2.76005315-.0033061-4.99669388-2.2399468-5-5v-40c.00330612-2.76005315 2.23994685-4.99669388 5-5h46c2.7600532.00330612 4.9966939 2.23994685 5 5z" /><path d="m53 8h-46c-1.65685425 0-3 1.34314575-3 3v36c0 1.6568542 1.34314575 3 3 3h46c1.6568542 0 3-1.3431458 3-3v-36c0-1.65685425-1.3431458-3-3-3zm-23 19.864-10.891-5.864 10.891-5.864 10.891 5.864zm12-4.19v11.726l-11 5.926v-11.726zm-13 5.926v11.726l-11-5.926v-11.726zm-23-18.6c0-.5522847.44771525-1 1-1h22v4.4l-12.474 6.72c-.013.007-.028.01-.041.018-.3023938.1816727-.4866943.5092336-.485.862v8.382l-10 5zm48 36c0 .5522847-.4477153 1-1 1h-46c-.55228475 0-1-.4477153-1-1v-9.382l10-5v3.382c.000193.3677348.2022003.7056937.526.88l13 7c.2959236.1593002.6520764.1593002.948 0l13-7c.3237997-.1743063.525807-.5122652.526-.88v-3.382l10 5zm0-11.618-10-5v-8.382c-.0001367-.3517458-.1850653-.6775544-.487-.858-.013-.008-.028-.011-.041-.018l-12.472-6.724v-4.4h22c.5522847 0 1 .4477153 1 1z" /><circle cx="6" cy="5" r="1" /><circle cx="10" cy="5" r="1" /><circle cx="14" cy="5" r="1" /><path d="m39 6h14c.5522847 0 1-.44771525 1-1s-.4477153-1-1-1h-14c-.5522847 0-1 .44771525-1 1s.4477153 1 1 1z" /></g></g></svg> {__(" View in your space")}
					</button>
				</model-viewer>
			</div>

			{props.editor ? (
				<style
					dangerouslySetInnerHTML={{
						__html: editor_css,
					}}
				/>
			) : null}
		</>
	);

}

export default ModelBox;